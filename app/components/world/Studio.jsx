/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 studio.glb -d 
*/

import * as THREE from 'three';
import React, {useRef, useState} from 'react';
import {useGLTF} from '@react-three/drei';
import {ShaderMaterial, Uniform} from 'three';
import {useLoader} from '@react-three/fiber';
import {Selection, Select} from '@react-three/postprocessing';
import {useNavigate} from '@remix-run/react';

import Effects from './../Effects';

import {vertex, fragment} from '../../shaders/baked/studio-glsl';

export function WoozStudio(props) {
  const {nodes} = useGLTF('/models/studio12/studio.glb');

  const splatterPositionsAndRotations = [
    {
      color: 'Blue',
      position: [-1.498, -0.443, -0.35],
      rotation: [Math.PI / 2, 0, -0.417],
    },
    {
      color: 'Green',
      position: [-1.552, -0.443, 0.163],
      rotation: [Math.PI / 2, 0, 0.169],
    },
    {
      color: 'White',
      position: [-1.579, -0.443, 0.414],
      rotation: [Math.PI / 2, 0, 0.574],
    },
  ];

  // Baked texture
  const bakedFinalTexture = useLoader(THREE.TextureLoader, '/baked/baked.jpg');
  bakedFinalTexture.flipY = false;
  bakedFinalTexture.colorSpace = THREE.SRGBColorSpace;

  const studioMaterial = new ShaderMaterial({
    uniforms: {
      uBakedDayTexture: new Uniform(bakedFinalTexture),
    },
    vertexShader: vertex,
    fragmentShader: fragment,
    side: THREE.DoubleSide,
  });

  // Hover states
  const [hovered, setHovered] = useState(null);
  const [poloHovered, setPoloHovered] = useState(null);
  const [splatterHovered, setSplatterHovered] = useState(null);

  const handlePoloPointerOver = (color) => {
    setPoloHovered(color);
    document.body.style.cursor = 'pointer';
  };
  const handlePoloPointerOut = () => {
    setPoloHovered(null);
    document.body.style.cursor = 'auto';
  };

  const handlePointerOver = () => {
    setHovered(true);
    document.body.style.cursor = 'pointer';
  };
  const handlePointerOut = () => {
    setHovered(false);
    document.body.style.cursor = 'auto';
  };

  const handleSplatterOver = () => {
    setSplatterHovered(true);
    document.body.style.cursor = 'pointer';
  };
  const handleSplatterOut = () => {
    setSplatterHovered(false);
    document.body.style.cursor = 'auto';
  };

  return (
    <group {...props} dispose={null} rotation={[0, -Math.PI / 2, 0]}>
      <mesh
        geometry={nodes.studio.geometry}
        material={studioMaterial}
        position={[0, 1.5, 0]}
      />
      <group>
        <mesh
          geometry={nodes.Polo_Black.geometry}
          material={studioMaterial}
          position={[-0.446, -0.441, -1.482]}
          rotation={[Math.PI / 2, 0, 1.468]}
        />
        <mesh
          geometry={nodes.Polo_White.geometry}
          material={studioMaterial}
          position={[-0.281, -0.441, -1.486]}
          rotation={[Math.PI / 2, 0, 1.404]}
        />
        <mesh
          geometry={nodes.Polo_DarkBlue.geometry}
          material={studioMaterial}
          position={[-0.12, -0.441, -1.486]}
          rotation={[Math.PI / 2, 0, -1.773]}
        />
        <mesh
          geometry={nodes.Polo_Green.geometry}
          material={studioMaterial}
          position={[0.053, -0.441, -1.486]}
          rotation={[Math.PI / 2, 0, 1.301]}
        />
        <mesh
          geometry={nodes.Polo_Grey.geometry}
          material={nodes.Polo_Grey.material}
          position={[0.229, -0.441, -1.486]}
          rotation={[Math.PI / 2, 0, 1.341]}
        />
        <mesh
          geometry={nodes.Polo_LightBlue.geometry}
          material={studioMaterial}
          position={[0.434, -0.441, -1.486]}
          rotation={[Math.PI / 2, 0, -1.76]}
        />
      </group>

      <Selection>
        <Select enabled={splatterHovered}>
          <group
            onPointerOver={handleSplatterOver}
            onPointerOut={handleSplatterOut}
          >
            {splatterPositionsAndRotations.map(
              ({color, position, rotation}, index) => (
                <mesh
                  key={color}
                  geometry={nodes[`Splatter_${color}`].geometry}
                  material={studioMaterial}
                  position={position}
                  rotation={rotation}
                />
              ),
            )}
          </group>
        </Select>

        <Select enabled={hovered}>
          <group
            onPointerOver={handlePointerOver}
            onPointerOut={handlePointerOut}
          >
            {['White', 'Green', 'Brown', 'Black', 'Blue'].map(
              (color, index) => (
                <mesh
                  key={color}
                  geometry={nodes[`Longsleeve_${color}`].geometry}
                  material={studioMaterial}
                  position={[
                    index === 0
                      ? -0.175
                      : index === 1
                      ? 0.06
                      : index === 2
                      ? -0.569
                      : index === 3
                      ? -0.744
                      : -0.391,
                    index === 0
                      ? -0.44
                      : index === 1
                      ? -0.441
                      : index === 2
                      ? -0.442
                      : index === 3
                      ? -0.442
                      : -0.439,
                    index === 0
                      ? 1.467
                      : index === 1
                      ? 1.483
                      : index === 2
                      ? 1.45
                      : index === 3
                      ? 1.444
                      : 1.45,
                  ]}
                  rotation={[
                    Math.PI / 2,
                    0,
                    index === 0
                      ? -1.581
                      : index === 1
                      ? 1.43
                      : index === 2
                      ? 1.668
                      : index === 3
                      ? 1.496
                      : -1.734,
                  ]}
                />
              ),
            )}
          </group>
        </Select>
        <Effects />
      </Selection>
    </group>
  );
}

useGLTF.preload('/models/studio12/studio.glb');
